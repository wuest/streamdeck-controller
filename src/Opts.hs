{-# LANGUAGE OverloadedStrings #-}

module Opts ( Options (..)
            , getOpts
            ) where

import Prelude
import System.Console.GetOpt

import qualified Data.Word                  as DW  (Word16)
import qualified System.Environment         as Env (getProgName, getArgs)
import qualified System.Exit                as Sys (exitSuccess)
import qualified System.IO                  as IO  (hPutStrLn, stderr)
import qualified Text.Printf                as P   (printf)

data Options = Options { optWeb     :: Bool -- Run configurator webapp
                       , webPort    :: Int  -- Port on which the webapp runs
                       , optVerbose :: Bool -- Verbosity
                       }

defaultOptions :: Options
defaultOptions = Options { optWeb = False
                         , webPort = 3333
                         , optVerbose = False
                         }

version :: String
version = "0.0.1"

showUDev :: Options -> IO Options
showUDev _ = do
    IO.hPutStrLn IO.stderr $ unlines
        [ "# Global access UDEV file for Elgato Stream Deck Generated by streamdeck-controller"
        , "#"
        , "# Install to /etc/udev/rules.d/elgato.rules to assign rw-rw-rw- permissions to"
        , "# all Stream Deck devices."
        , "#"
        , "# See https://github.com/wuest/streamdeck-controller/blob/master/README.md for more"
        , "# information."
        , ""
        , line "SUBSYSTEM" "usb" vendorID productID
        , line "KERNEL" "hidraw*" vendorID productID
        ]
    Sys.exitSuccess
  where
    line :: String -> String -> DW.Word16 -> DW.Word16 -> String
    line = P.printf "%s==\"%s\", ATTRS{idVendor}==\"%04x\", ATTRS{idProduct}==\"%04x\", MODE=\"0666\""
    vendorID :: DW.Word16
    vendorID = 0x0fd9
    productID :: DW.Word16
    productID = 0x0060

printVersion :: Options -> IO Options
printVersion _ = do
    prg <- Env.getProgName
    IO.hPutStrLn IO.stderr $ prg ++ " version " ++ version
    Sys.exitSuccess

printHelp :: Options -> IO Options
printHelp _ = do
    prg <- Env.getProgName
    IO.hPutStrLn IO.stderr (usageInfo prg options)
    Sys.exitSuccess

runWeb :: Options -> IO Options
runWeb opt = return opt { optWeb = True }

setWebPort :: String -> Options -> IO Options
setWebPort arg opt = return opt { webPort = read arg :: Int }

verbose :: Options -> IO Options
verbose opt = return opt { optVerbose = True }

blank :: OptDescr (Options -> IO Options)
blank = Option [] [] (NoArg return) ""

options :: [ OptDescr (Options -> IO Options) ]
options =
    [ Option ['w'] ["web"]
        (NoArg runWeb) "Run the configurator web application"

    , Option ['p'] ["port"]
        (ReqArg setWebPort "PORT") "Port to run the web application on (default: 3333)"

    , blank

    , Option ['d'] ["dbus"]
        (NoArg showUDev) "Generate udev configuration file for globally accessible Stream Decks on Linux"

    , Option ['v'] ["verbose"]
        (NoArg verbose) "Enable verbose messages (currently does nothing)"

    , Option ['V'] ["version"]
        (NoArg printVersion) "Print version"

    , Option ['h', '?'] ["help"]
        (NoArg printHelp) "Show help"
    ]

getOpts :: IO Options
getOpts = do
    args <- Env.getArgs
    let (actions, _nonoptions, _errors) = getOpt RequireOrder options args
    foldl (>>=) (return defaultOptions) actions
